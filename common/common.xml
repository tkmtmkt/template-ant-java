<?xml version="1.0" encoding="UTF-8" ?>
<project name="template" default="build" basedir="." xmlns:jacoco="antlib:org.jacoco.ant">

    <!-- ========================================================== -->
    <!-- 定義 -->
    <!-- ========================================================== -->

    <!-- プロパティファイル読み込み -->
    <property file="${common.dir}/common.properties"/>

    <!-- ライブラリ参照 -->
    <path id="build.classpath">
        <fileset dir="${lib.runtime.dir}" includes="**/*.jar"/>
        <fileset dir="${lib.develop.dir}" includes="**/*.jar"/>
    </path>

    <!-- ========================================================== -->
    <!-- 複数ターゲット実行 -->
    <!-- ========================================================== -->
    <target name="build" depends="test,jar"/>
    <target name="all" depends="clean,build,count,cpd,checkstyle,findbugs,cover,javadoc"/>

    <!-- ========================================================== -->
    <!-- 初期設定 -->
    <!-- ========================================================== -->
    <target name="init">
        <mkdir dir="${build.dir}"/>
    </target>

    <!-- ========================================================== -->
    <!-- ソースコードのコンパイル -->
    <!-- ========================================================== -->
    <target name="compile" depends="init">
        <mkdir dir="${main.classes.dir}"/>
        <javac srcdir="${main.src.dir}"
               destdir="${main.classes.dir}"
               includes="**/*.java"
               encoding="${javac.encoding}"
               debug="${javac.debug}"
               optimize="${javac.optimize}"
               deprecation="${javac.deprecation}"
               target="${javac.target}"
               source="${javac.source}"
               includeAntRuntime="false">
            <compilerarg value="-Xlint:all,-unchecked"/>
            <classpath>
                <path refid="build.classpath"/>
            </classpath>
        </javac>
    </target>

    <!-- ========================================================== -->
    <!-- テストコードのコンパイル -->
    <!-- ========================================================== -->
    <target name="test-compile" depends="compile" if="test.src.dir">
        <mkdir dir="${test.classes.dir}"/>
        <javac srcdir="${test.src.dir}"
               destdir="${test.classes.dir}"
               includes="**/*.java"
               encoding="${javac.encoding}"
               debug="${javac.debug}"
               optimize="${javac.optimize}"
               deprecation="${javac.deprecation}"
               target="${javac.target}"
               source="${javac.source}"
               includeAntRuntime="false">
            <compilerarg value="-Xlint:all,-unchecked"/>
            <classpath>
                <pathelement location="${main.classes.dir}"/>
                <path refid="build.classpath"/>
            </classpath>
        </javac>
    </target>

    <!-- ========================================================== -->
    <!-- jarファイルの作成 -->
    <!-- ========================================================== -->
    <target name="jar" depends="compile">
        <mkdir dir="${build.dir}"/>
        <jar jarfile="${build.dir}/${product.fullname}.jar" basedir="${main.classes.dir}">
            <manifest>
                <attribute name="Implementation-Title" value="${product.basename}"/>
                <attribute name="Implementation-Version" value="${product.version}"/>
                <attribute name="Implementation-Vendor" value="${product.vendor}"/>
            </manifest>
        </jar>
    </target>

    <!-- ========================================================== -->
    <!-- ドキュメンテーション -->
    <!-- ========================================================== -->
    <target name="javadoc">
        <mkdir dir="${javadoc.dir}"/>
        <javadoc destdir="${javadoc.dir}"
                 encoding="${javac.encoding}"
                 source="${javac.source}"
                 windowtitle="${product.fullname}"
                 docencoding="${javac.encoding}"
                 charset="${javac.encoding}">
            <doctitle>${product.fullname}</doctitle>
            <classpath refid="build.classpath"/>
            <fileset dir="${main.src.dir}"/>
        </javadoc>
    </target>

    <!-- ========================================================== -->
    <!-- JavaNCSSの実行 -->
    <!-- ========================================================== -->
    <target name="count" if="report.javancss.dir">
        <taskdef name="javancss" classname="javancss.JavancssAntTask">
            <classpath>
                <fileset dir="${javancss.home.dir}/lib" includes="*.jar"/>
            </classpath>
        </taskdef>

        <mkdir dir="${report.javancss.dir}"/>
        <javancss srcdir="${src.main.dir}"
                  includes="**/*.java"
                  abortOnFail="false"
                  generateReport="true"
                  outputfile="${report.javancss.dir}/javancss_metrics.xml"
                  format="xml"/>
    </target>

    <!-- ========================================================== -->
    <!-- CPDの実行 -->
    <!-- ========================================================== -->
    <target name="cpd" if="report.cpd.dir">
        <taskdef name="cpd" classname="net.sourceforge.pmd.cpd.CPDTask">
            <classpath>
                <fileset dir="${cpd.home.dir}/lib" includes="*.jar"/>
            </classpath>
        </taskdef>

        <mkdir dir="${report.cpd.dir}"/>
        <cpd encoding="${javac.encoding}"
             language="java"
             minimumTokenCount="100"
             format="xml"
             outputfile="${report.cpd.dir}/cpd.xml">
            <fileset dir="${main.src.dir}">
                <include name="**/*.java"/>
            </fileset>
        </cpd>
    </target>

    <!-- ========================================================== -->
    <!-- Checkstyleの実行 -->
    <!-- ========================================================== -->
    <target name="checkstyle" depends="compile" if="report.checkstyle.dir">
        <taskdef resource="checkstyletask.properties">
            <classpath>
                <fileset dir="${checkstyle.home.dir}" includes="*.jar"/>
            </classpath>
        </taskdef>

        <mkdir dir="${report.checkstyle.dir}"/>
        <checkstyle config="${checkstyle.home.dir}/sun_checks.xml"
                    failureProperty="checkstyle.failure"
                    failOnViolation="false">
            <formatter type="xml" tofile="${report.checkstyle.dir}/checkstyle-result.xml"/>
            <fileset dir="${main.src.dir}" includes="**/*.java"/>
        </checkstyle>
    </target>

    <!-- ========================================================== -->
    <!-- FindBugsの実行 -->
    <!-- ========================================================== -->
    <target name="findbugs" depends="compile" if="report.findbugs.dir">
        <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask">
            <classpath>
                <fileset dir="${findbugs.home.dir}" includes="**/*.jar"/>
            </classpath>
        </taskdef>

        <mkdir dir="${report.findbugs.dir}"/>
        <findbugs home="${findbugs.home.dir}"
                  output="xml"
                  outputfile="${report.findbugs.dir}/findbugs.xml">
            <class location="${main.classes.dir}"/>
            <auxClasspath refid="build.classpath"/>
            <sourcePath path="${main.src.dir}"/>
        </findbugs>
    </target>

    <!-- ========================================================== -->
    <!-- テスト実行 -->
    <!-- ========================================================== -->
    <target name="test" depends="test-compile" if="report.junit.dir">
        <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
            <classpath path="${jacoco.home.dir}/lib/jacocoant.jar"/>
        </taskdef>

        <mkdir dir="${report.junit.dir}"/>
        <jacoco:coverage destfile="${jacoco.exec.file}">
            <junit fork="yes" printsummary="yes" haltonfailure="no">
                <classpath>
                    <pathelement location="${main.classes.dir}"/>
                    <pathelement location="${test.classes.dir}"/>
                    <path refid="build.classpath"/>
                </classpath>
                <formatter type="xml"/>
                <batchtest fork="yes" todir="${report.junit.dir}">
                    <fileset dir="${test.classes.dir}">
                        <include name="**/*Test.class"/>
                    </fileset>
                </batchtest>
            </junit>
        </jacoco:coverage>
    </target>

    <!-- ========================================================== -->
    <!-- カバレッジレポートの作成 -->
    <!-- ========================================================== -->
    <target name="cover" depends="test" if="report.jacoco.dir">
        <mkdir dir="${report.jacoco.dir}"/>
        <jacoco:report>
            <executiondata>
                <file file="${jacoco.exec.file}"/>
            </executiondata>

            <structure name="${product.fullname}">
                <classfiles>
                    <fileset dir="${main.classes.dir}"/>
                </classfiles>
                <sourcefiles encoding="${javac.encoding}">
                    <fileset dir="${main.src.dir}"/>
                </sourcefiles>
            </structure>

            <html destdir="${report.jacoco.dir}/html"/>
            <xml destfile="${report.jacoco.dir}/jacoco.xml"/>
        </jacoco:report>
    </target>

    <!-- ========================================================== -->
    <!-- 成果物の消去 -->
    <!-- ========================================================== -->
    <target name="clean">
        <delete dir="${build.dir}"/>
    </target>

</project>
<!-- vim: set ts=4 sw=4 et: -->
